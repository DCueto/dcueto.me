---
import Button from "./Button.astro";
import { getTranslationValue } from '@utils/i18n';
import type { Locale } from '@services/routing';

const locale = Astro.params.locale as Locale;
const t = (key: string): string => locale ? getTranslationValue(locale, key) : getTranslationValue('en', key);
---

<form class="contact-form" data-lang={ locale }>
  <div class="form-content">
    <div class="field-name-container field-container">
      <input type="text" name="name" id="contact-name" placeholder={ t('contact.formName.placeholder') }>
      <div class="error-form"><span class="error-message" id="name-error">Campo requerido</span></div>
    </div>
    <div class="field-email-container field-container">
      <input type="email" name="email" id="contact-email" placeholder={ t('contact.formEmail.placeholder') }>
      <div class="error-form"><span class="error-message" id="email-error">Campo requerido</span></div>
    </div>
    <div class="field-subject-container field-container">
      <input type="text" name="subject" id="contact-subject" placeholder={ t('contact.formSubject.placeholder') }>
      <div class="error-form"><span class="error-message" id="subject-error">Campo requerido</span></div>
    </div>
    <div class="field-message-container field-container">
      <textarea name="message" id="contact-message" cols="30" rows="10" placeholder={ t('contact.formMessage.placeholder') }></textarea>
      <div class="error-form"><span class="error-message" id="message-error">Campo requerido</span></div>
    </div>
  </div>
  <div class="form-button-container">
    <Button size="large" text={ t('contact.formButton') } align='center' type="submit"/>
  </div>
  <p class="feedback-message"></p>
</form>


<style lang="scss">
  @mixin light-theme {
    --color-background__contact-me: white;
    --color-text__contact-me: var(--color-black-night);
    --color-background__contact-form: white;
    --color-border__contact-form: var(--color-black-night);
    --color-background__feedback-message: black;
    --color-text__feedback-message: white;
  }

  @mixin dark-theme {
    --color-background__contact-me: var(--color-black-night);
    --color-text__contact-me: white;
    --color-background__contact-form: var(--color-black-night);
    --color-border__contact-form: white;
    --color-background__feedback-message: white;
    --color-text__feedback-message: black;
  }

  :root{
    @include light-theme;
  }

  :root.dark{
    @include dark-theme;
  }

  @media ( prefers-color-scheme: dark ) {
    :root{
      @include light-theme;
    }

    :root.dark{
      @include dark-theme;
    }
  }


  .contact-me{
    background-color: var(--color-background__contact-me);
    padding-bottom: 2.5rem;
    padding-top: 2.5rem;
  }

  .contact-form{
    border: 0.0625rem solid var(--color-border__contact-form);
  }

  .contact-form .form-content{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
    grid-template-rows: 10rem 2fr;
    background-color: var(--color-background__contact-me);
  }

  .form-content input:focus, .form-content textarea:focus{
    outline: none !important;
  }

  .form-content input::placeholder, .form-content textarea::placeholder{
    color: var(--color-text__contact-me);
  }

  .field-container{
    border: 0.0625rem solid var(--color-border__contact-form);
    display: flex;
    flex-direction: column;
  }

  .field-container input, .field-container textarea{
    width: 100%;
    height: 100%;
    border: none;
  }

  .field-name-container{
    grid-column: 1 / span 4;
    grid-row: 1 / span 1;
  }

  .field-email-container{
    grid-column: 5 / span 9;
    grid-row: 1 / span 1;
  }

  .field-subject-container{
    grid-column: 1 / span 3;
    grid-row: 2 / span 1;
  }

  .field-message-container{
    grid-column: 4 / span 9;
    grid-row: 2 / span 1;
  }

  .form-content input, .form-content textarea{
    // border: 0.0625rem solid var(--color-border__contact-form);
    background-color: var(--color-background__contact-me);
    padding: 0 0.625rem;
    font-size: 1.25rem;
    color: var(--color-text__contact-me);
    font-weight: 500;
    letter-spacing: -0.04rem;
  }

  .form-content input{
    vertical-align: top;
    font-family: var(--font-main);
  }

  .form-content textarea{
    padding: 1.25rem 0.625rem;
    resize: none;
  }

  .input-name-container{
    width: 45%;
    min-height: 6.25rem;
    position: relative;
  }

  #contact-name{
    width: 100%;
    height: 100%;
    position: relative;
  }

  .form-button-container{
    display: flex;
    border: 0.0625rem solid var(--color-border__contact-form);
  }

  .error-form{
    padding: .5rem .8rem;
    opacity: 0;
    transform: translateY(-100%);
    display: none;
    transition: all .5s ease-in-out;
  }

  .error-form.active{
    display: block;
    opacity: 1;
    transform: translateY(0);
  }

  .error-message{
    display: block;
    border-top: 0.0625rem solid var(--color-border__contact-form);
    background-color: yellow;
    width: 100%;
    padding: .1rem;
    font-size: .9rem;
    color: black;
    font-weight: bold;
  }

  .feedback-message{
    display: none;
    margin: 0 auto;
    text-align: center;
    width: 100%;
    background-color: var(--color-background__feedback-message);
    color: var(--color-text__feedback-message);
    padding: 1rem;
    text-transform: uppercase;
    font-weight: bold;
  }

  .feedback-message.active{
    display: block;
  }

  .feedback-message-error{
    background-color: red;
    color: white;
  }

  @media screen and ( width <= 800px ) {
    .contact-form .form-content{
      grid-template-columns: 1fr;
      grid-template-rows: 10rem 10rem 10rem 15.625rem;
    }

    .field-name-container{
      grid-column: 1 / 1;
      grid-row: 1 / span 1;
    }

    .field-email-container{
      grid-column: 1 / span 1;
      grid-row: 2 / span 1;
    }

    .field-subject-container{
      grid-column: 1 / span 1;
      grid-row: 3 / span 1;
    }

    .field-message-container{
      grid-column: 1 / span 1;
      grid-row: 4 / span 1;
    }
  }

  // animate transition error message
  // animate transition feedback message
  // animate and add a spinner when sending email

  // .error-form.active{
  //   animation: whenErrorActive 1s ease-in-out;
  // }

  // @keyframes whenErrorActive {
  //   0% {
  //     transform: translateY(-100%);
  //     opacity: 0;
  //   }

  //   100% {
  //     transform: translateY(0);
  //     opacity: 1;
  //   }
  // }
</style>


<script>
  const form = document.querySelector('form.contact-form') as HTMLFormElement;
  const inputName = form.querySelector('input[name="name"]') as HTMLInputElement;
  const inputEmail = form.querySelector('input[name="email"]') as HTMLInputElement;
  const inputSubject = form.querySelector('input[name="subject"]') as HTMLInputElement;
  const inputMessage = form.querySelector('textarea[name="message"]') as HTMLTextAreaElement;
  const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const locale = form.getAttribute('data-lang');

  // EVENTS
  form.addEventListener('submit', sendEmail);
  inputName.addEventListener('input', validateField);
  inputEmail.addEventListener('input', validateField);
  inputSubject.addEventListener('input', validateField);
  inputMessage.addEventListener('input', validateField);

  // GLOBAL FORM VALUES
  interface EmailFormValues {
    [key: string]: string;
  }
  const formValues: EmailFormValues = {
    name: '',
    email: '',
    subject: '',
    message: ''
  }

  const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const emptyValidation = (value: string): boolean => value.trim() === '';
  const emailValidation = (value: string, emailPattern: RegExp): boolean => emailPattern.test(value);
  
  const disableButton = (): void => {
    submitButton.classList.add('disabled');
    submitButton.disabled = true;
  }
  disableButton();

  const checkFormValues = ( formValues: EmailFormValues ): boolean => {
    // require all fields to be filled
    if( Object.values(formValues).includes('') ){
      disableButton();
      return false;
    }

    submitButton.classList.remove('disabled');
    submitButton.disabled = false;
    return true;
  }

  const resetForm = ( form: HTMLFormElement ): void => {
    Object.keys(formValues).forEach((key) => {
      formValues[key] = '';
    });

    form.reset();
    checkFormValues(formValues);
  }

  function showError(message: string, reference: HTMLElement) {
    cleanError(reference);

    // Active error message
    const errorFormEl = reference.parentElement?.querySelector('.error-form') as HTMLElement;
    (errorFormEl.querySelector('.error-message') as HTMLElement).textContent = message;
    errorFormEl.classList.add('active');
  }

  function cleanError(reference: HTMLElement) {
    const errorFormEl = reference.parentElement?.querySelector('.error-form.active') as HTMLElement;
    errorFormEl && errorFormEl.classList.remove('active');
  }


  // EVENT FUNCTIONS

  function validateField(e: Event): void {
    e.preventDefault();

    const eventTarget = e.target as HTMLInputElement;

    if ( emptyValidation(eventTarget.value) ){
      // show error message
      const errorMessage = locale === 'es' ? 'Campo requerido' : 'Field required';
      showError(errorMessage, eventTarget);
      // update formValue
      formValues[eventTarget.name] = '';
      // check formValues to enable submit button
      checkFormValues(formValues);
      return;
    }

    if ( eventTarget.name === 'email' && !emailValidation(eventTarget.value, emailPattern) ){
      const errorMessage = locale === 'es' ? 'El email no es v√°lido' : 'Email not valid';
      showError(errorMessage, eventTarget);
      formValues[eventTarget.name] = '';
      checkFormValues(formValues);
      return;
    }

    // if surpass validations then clean error message and update formValues
    cleanError(eventTarget);
    formValues[eventTarget.name] = eventTarget.value.trim();

    // check formValues to enable submit button
    checkFormValues(formValues);
  }

  async function sendEmail( e: Event ){
    e.preventDefault();

    if ( !checkFormValues(formValues) ) return;

    // send Email
    try {
      const emailjs_apikey = import.meta.env.PUBLIC_EMAILJS_APIKEY as string;
      const emailjs_serviceid = import.meta.env.PUBLIC_EMAILJS_SERVICE_ID as string;
      const emailjs_templateid = import.meta.env.PUBLIC_EMAILJS_TEMPLATE_ID as string;

      console.log( emailjs_apikey, emailjs_serviceid, emailjs_templateid );

      const dataEmailjs = {
        service_id: emailjs_serviceid,
        template_id: emailjs_templateid,
        user_id: emailjs_apikey,
        template_params: {
          from_name: formValues.name,
          subject: formValues.subject,
          from_email: formValues.email,
          message: formValues.message,
        }
      }

      const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataEmailjs),
      });

      // const response = { ok: true };

      if (response.ok) {
        // message email sent
        const messageFeedback = locale === 'es' ? 'Email enviado' : 'Email sent';
        const feedbackEl = document.querySelector('p.feedback-message') as HTMLParagraphElement;
        feedbackEl.classList.add('active');
        feedbackEl.textContent = messageFeedback;

        setTimeout(() => {
          feedbackEl.classList.remove('active');
        }, 5000);

        resetForm(form);
      } else {
        const messageFeedback = locale === 'es' ? 'Error enviando el email' : 'Error sending email';
        const feedbackEl = document.querySelector('p.feedback-message') as HTMLParagraphElement;
        feedbackEl.classList.add('active', 'feedback-message-error');
        feedbackEl.textContent = messageFeedback;

        setTimeout(() => {
          feedbackEl.classList.remove('active');
        }, 5000);
      }

    } catch (error) {
      console.error('Error sending email', error);
    }

  }


</script>