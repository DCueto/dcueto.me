---
import type { CollectionEntry } from "astro:content";
import ProjectCard from "./ProjectCard.astro";

import { generateLink } from "@services/routing";
import type { Locale } from "@services/routing";
import { getTranslationValue } from "@utils/i18n";

type Props = {
  projects: CollectionEntry<'projects'>[]
};

const { projects } = Astro.props;
const locale = Astro.params.locale as Locale;
const { pathname } = Astro.url;

const t = (key: string): string => locale ? getTranslationValue(locale, key) : getTranslationValue('en', key);
---

<section class="projects wrap">
  <h2 class="underline-title">{ t('projects.title') }</h2>
  <div class="projects-container">
    {
      projects.map((project) => (
        <ProjectCard
          title={project.data.title}
          description={project.data.description}
          tags={project.data.tags}
          image={project.data.image}
          href={ project.data.href ? project.data.href : generateLink("projects", project.slug, pathname, locale)}
          { ...(project.data.images && { images: project.data.images }) }
          { ...(project.data.code_repo && { repoLink: project.data.code_repo }) }
          { ...(project.data.demo && { demoLink: project.data.demo }) }
          { ...(project.data.link && { link: project.data.link }) }
        />
      ))
    }
  </div>
</section>


<style lang="scss">
  @mixin light-theme {
    --color-background__projects: var(--color-gray-light3);
    --color-text__project-details: white;
    --color-background__project-details: var(--color-black-oil);
    --color-background__project-card--transition: var(--color-yellow-main);
    --color-text__project-card__h3: var(--color-yellow-js);
    --color-background__project-card__h3: rgba(12, 12, 12, .7);
  }

  @mixin dark-theme {
    --color-background__projects: var(--color-gray-dark);
    --color-text__project-details: white;
    --color-background__project-details: var(--color-black-oil);
    --color-background__project-card--transition: var(--color-yellow-main);
    --color-text__project-card__h3: var(--color-yellow-js);
    --color-background__project-card__h3: rgba(12, 12, 12, .7);
  }

  :root{
    @include light-theme;
  }

  :root.dark{
    @include dark-theme;
  }

  @media ( prefers-color-scheme: dark ) {
    :root{
      @include light-theme;
    }

    :root.dark{
      @include dark-theme;
    }
  }

  .grid-projects{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    // margin-bottom: 2rem;
  }

  .grid-projects__project{
    background-color: var(--color-background__project-details);
    position: relative;
    overflow: hidden;
    border-radius: 5px;
    transition: all .6s ease;
    height: 0;
    padding-bottom: calc(3.3 / 4 * 100%);
  }

  .grid-projects__project:hover{
    grid-column: span 2;
    z-index: 10;
    // padding-bottom: calc(6.6 / 4 * 100%);
  }

  .grid-projects__project:nth-child(odd):hover ~ .grid-projects__project:nth-child(even){
    transform: translateY(calc(-6.6 / 4 * 100%)); /* Move the next item down */
    background-color: yellow;
  }

  .grid-projects__project:nth-child(even):hover ~ .grid-projects__project:nth-child(odd) {
    transform: translateY(calc(6.6 / 4 * 100%)); /* Move the previous item up */
    background-color: blue;
    // opacity: 0;
  }

  // .grid-projects__project::before{
  //   content: '';
  //   display: block;
  //   padding-bottom: calc(3.3 / 4 * 100%);
  //   transition: padding-bottom 0.6s ease;
  // }

  // .grid-projects__project:hover::before{
  //   padding-bottom: calc(6.6 / 4 * 100%);
  // }


  .projects{ 
    background-color: var(--color-background__projects);
    padding-top: 2.5rem;
    padding-bottom: 2.5rem;
  }

  .projects .projects-container{
    display: flex;
    flex-wrap: wrap;
    gap: 3%;
    height: 100%;
  }

</style>